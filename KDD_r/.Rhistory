d=c(171,183,235,540,633,2138,3633,1422,580,273,183,135,
172,231,330,588,963,2464,4215,1806,576,275,183,141,
218,315,468,780,1023,2808,4686,2073,722,373,195,168,
235,350,490,985,1189,3254,5253,2440,874,480,216,185,
171,183,235,540,633,2138,3633,1422,580,273,183,135)
#标准化
p=12
n=length(d)
a=NULL
for(i in (p+1):n){
a[i]=sum(d[(i-p):(i-1)]^2)
}
b=a^(1/2)
d_p=matrix(0,(n-p),(p+1))
for(i in 1:(p+1)){
#1-p为延迟,p+1为当期
{if(i<=p) d_p[,i]=d[(p+1-i):(n-i)]/b[(p+1):n]}
{if(i==p+1)  d_p[,i]=d[(p+1):n]/b[(p+1):n]}
}
fa=rep(0.5,12)
d_p
e=NULL
e0=1
h=0    #循环次数
Auto_scale=function(fa){
for(i in (p+1):n){
x_t=d_p[i,]
x1[i]=sum(fa*x_t)
e[i]=d[-Pi,(p+1)]-x1[i]
fa=fa+2*k*e[i]*(x_t[-(p+1)])
}
return(list("fa"=fa,'e'=e))
}
l=Auto_scale(fa)
fa=rep(0.5,12)
e=NULL
di=NULL
e0=1
h=0    #循环次数
Auto_scale=function(fa){
for(i in (p+1):n){
x_t=d_p[i,]
d1[i]=sum(fa*x_t)
e[i]=d[-Pi,(p+1)]-d1[i]
fa=fa+2*k*e[i]*(x_t[-(p+1)])
}
return(list("fa"=fa,'e'=e))
}
l=Auto_scale(fa)
fa=rep(0.5,12)
e=NULL
d1=NULL
e0=1
h=0    #循环次数
Auto_scale=function(fa){
for(i in (p+1):n){
x_t=d_p[i,]
d1[i]=sum(fa*x_t)
e[i]=d[-Pi,(p+1)]-d1[i]
fa=fa+2*k*e[i]*(x_t[-(p+1)])
}
return(list("fa"=fa,'e'=e))
}
l=Auto_scale(fa)
i=13
n
x_t=d_p[i,]
d1[i]=sum(fa*x_t)
e[i]=d[-Pi,(p+1)]-d1[i]
fa=fa+2*k*e[i]*(x_t[-(p+1)])
x_t=d_p[i,]
d1[i]=sum(fa*x_t[-(p+1)])
e[i]=d[-Pi,(p+1)]-d1[i]
fa=fa+2*k*e[i]*(x_t[-(p+1)])
x_t[-(p+1)]
fa
x_t=d_p[i,]
d1[i]=sum(fa*x_t[-(p+1)])
e[i]=d_p[i,(p+1)]-d1[i]
fa=fa+2*k*e[i]*(x_t[-(p+1)])
fa=rep(0.5,12)
k=1/12   #除以所有个数
e=NULL
d1=NULL
e0=1
h=0    #循环次数
Auto_scale=function(fa){
for(i in (p+1):n){
x_t=d_p[i,]
d1[i]=sum(fa*x_t[-(p+1)])
e[i]=d_p[i,(p+1)]-d1[i]
fa=fa+2*k*e[i]*(x_t[-(p+1)])
}
return(list("fa"=fa,'e'=e))
}
l=Auto_scale(fa)
l
i=13
x_t=d_p[i,]
d1[i]=sum(fa*x_t[-(p+1)])
e[i]=d_p[i,(p+1)]-d1[i]
fa=fa+2*k*e[i]*(x_t[-(p+1)])
fa
i=14
x_t=d_p[i,]
d1[i]=sum(fa*x_t[-(p+1)])
e[i]=d_p[i,(p+1)]-d1[i]
fa=fa+2*k*e[i]*(x_t[-(p+1)])
fa
e
nrow(d)
nrow(d_p)
k=1/12   #除以所有个数
e=NULL
d1=NULL
e0=1
h=0    #循环次数
Auto_scale=function(fa){
for(i in 1:nrow(d_p)){
x_t=d_p[i,]
d1[i]=sum(fa*x_t[-(p+1)])
e[i]=d_p[i,(p+1)]-d1[i]
fa=fa+2*k*e[i]*(x_t[-(p+1)])
}
return(list("fa"=fa,'e'=e))
}
fa=rep(0.5,12)
l=Auto_scale(fa)
l
mse=sum(l$e[(p+1):n]^2)/(n-p)
fa=l$fa
mse0=mse+1
while((mse>e0)&(mse0>mse)){
mse0=mse    #前1次
l=Auto(fa)
mse=sum(l$e[(p+1):n]^2)/(n-p)
fa=l$fa
h=h+1
}
l
mse
mse=sum(l$e[(p+1):n]^2)/(n-p)
mse
l$e^2
mse=sum(l$e^2)/(n-p)
fa=l$fa
mse0=mse+1
while((mse>e0)&(mse0>mse)){
mse0=mse    #前1次
l=Auto(fa)
mse=sum(l$e^2)/(n-p)
fa=l$fa
h=h+1
}
l
mse
e0=0.01
while((mse>e0)&(mse0>mse)){
mse0=mse    #前1次
l=Auto(fa)
mse=sum(l$e^2)/(n-p)
fa=l$fa
h=h+1
}
l
mse0
mse
l=Auto(fa)
mse=sum(l$e^2)/(n-p)
while((mse>e0)&(mse0>mse)){
mse0=mse    #前1次
l=Auto_scale(fa)
mse=sum(l$e^2)/(n-p)
fa=l$fa
h=h+1
}
l
mse
mse0
l=Auto_scale(fa)
mse=sum(l$e^2)/(n-p)
mse
fa=l$fa
#--------------------
d=c(171,183,235,540,633,2138,3633,1422,580,273,183,135,
172,231,330,588,963,2464,4215,1806,576,275,183,141,
218,315,468,780,1023,2808,4686,2073,722,373,195,168,
235,350,490,985,1189,3254,5253,2440,874,480,216,185,
171,183,235,540,633,2138,3633,1422,580,273,183,135)
#标准化
p=12
n=length(d)
a=NULL
for(i in (p+1):n){
a[i]=sum(d[(i-p):(i-1)]^2)
}
b=a^(1/2)
d_p=matrix(0,(n-p),(p+1))
for(i in 1:(p+1)){
#1-p为延迟,p+1为当期
{if(i<=p) d_p[,i]=d[(p+1-i):(n-i)]/b[(p+1):n]}
{if(i==p+1)  d_p[,i]=d[(p+1):n]/b[(p+1):n]}
}
fa=rep(0.5,12)
k=1/12   #除以所有个数
e=NULL
d1=NULL
e0=0.01
h=0    #循环次数
Auto_scale=function(fa){
for(i in 1:nrow(d_p)){
x_t=d_p[i,]
d1[i]=sum(fa*x_t[-(p+1)])
e[i]=d_p[i,(p+1)]-d1[i]
fa=fa+2*k*e[i]*(x_t[-(p+1)])
}
return(list("fa"=fa,'e'=e))
}
l=Auto_scale(fa)
mse=sum(l$e^2)/(n-p)
fa=l$fa
mse0=mse+1
while((mse>e0)&(mse0>mse)){
mse0=mse    #前1次
l=Auto_scale(fa)
mse=sum(l$e^2)/(n-p)
fa=l$fa
h=h+1
}
l
h
0.1625*3.36+3.91*0.7644
l$fa*d[(n-11):n]
sum(l$fa*d[(n-11):n])
d[(n-11):n]
l$fa
sum(l$fa*d[(n-11):n])
sum(l$fa*rev(d[(n-11):n]))
mse
l
d1
library('TSA')
#-------------线性时间
data(rwalk)
plot(rwalk,type='o')
model1=lm(rwalk~time(rwalk))
summary(model1)
abline(model1)
data("tempdub")
plot(tempdub)
tempdub
month=season(tempdub)
month
model2=lm(tempdub~month-1)
summary(model2)
model3=lm(tempdub~month)
summary(model3)
har=harmonic(tempdub,1)
har
har[1,1];har[1,2]
har[1,1];har[2,1]
har[,1]
round(har[,1],2)
cos(2*3.14*12*c(1:60))
cos(2*3.14/12*c(1:60))
??pi
round(har[,1],2)
model4=lm(tempdub~har)
summary(model4)
plot(tempdub,type='o',color=red)
#预测拟合曲线与实际点
plot(ts(fitted(model4)),freq=12,start=c(1964,1),type='l')
ylim=range(c(fitted(model4),tempdub))
points(tempdub)
plot(ts(fitted(model4),freq=12,start=c(1964,1)),type='l')
ylim=range(c(fitted(model4),tempdub))
points(tempdub)
plot(ts(fitted(model4),freq=12,start=c(1964,1)),
type='l',
ylim=range(c(fitted(model4),tempdub)))
points(tempdub)
plot(ts(fitted(model4),freq=12,start=c(1964,1)),
type='l',
ylim=range(c(fitted(model4),tempdub)),
ylab="y")
points(tempdub)
setwd("/Users/apple/code_tool/KDD_run/KDD_r")
m='10'              #月----
d=25:31             #日----
h=c('08','09','17','18')           #小时----0-23
stable_h=c(":00:00",":20:00",":40:00")
stable=NULL
for (k in 1:length(d)) {
for (i in 1:length(h)) {
for (j in 1:2) {
stable_i=paste0("[","2016-",m,"-",d[k]," ",h[i],stable_h[j],',',"2016-",m,"-",d[k]," ",h[i],stable_h[j+1],")")
stable = c(stable,stable_i)
}
top=as.numeric(h[i])+1
if(top<10) top=paste0("0",top)
stable_i=paste0("[","2016-",m,"-",d[k]," ",h[i],stable_h[3],',',"2016-",m,"-",d[k]," ",top,stable_h[1],")")
stable = c(stable,stable_i)
}
}
write.table(as.vector(stable),'25-31time_wondiow.txt',row.names = F,
col.names = F)
time_windows=read.table("25-31time_wondiow.txt")
sub=read.csv("./18day_8hour/best_sub_volume.csv")
View(sub)
View(sub)
sub$time_window <- time_window
sub$time_window <- time_windows
View(sub)
View(time_windows)
View(sub)
View(time_windows)
ll=rep(time_windows,5)
ll
ll=rep(as.character(time_windows),5)
ll
ll=rep(as.vector(time_windows),5)
rep(1,3)
as.vector(time_windows)
ll=rep(time_windows[,1],5)
ll
ll=rep(as.character(time_windows[,1]),5)
sub$time_window <- rep(as.character(time_windows[,1]),5)
View(sub)
write.csv(sub,"sub_volume_0530.csv",row.names = F)
