for (k in 1:length(result)) {
fit_km=kmeans(d_k,centers=k)
result[k]=fit_km$betweenss/fit_km$totss
}
round(result,2)
plot(1:length(result),result,type='b',main="Choosing the Optimal Number of Cluster",
xlab='namber of cluster:k',ylab='between/totss')
route_volume
#  聚类 for volume
setwd("/Users/apple/code_tool/KDD_run/KDD_r/18day_8hour")
#--------每条路线分为2个时间段来建模
tollgate_id=1              #-------收费站（123）
direction=0                #-------方向（0进1出）
start_hour=c(6,7,8,9)     #小时----0-23，(6,7,8,9)(15,16,17,18)
#1----------------------按时间段产生训练数据
#读入train数据
data=read.table(paste0(" 18day_8hour   tollgate:",tollgate_id,'_',direction,'.txt'),
he=T)
data=data[order(data$start_day),]    #每天的数据排序归类
#2----------------读入需要的函数
source('/Users/apple/code_tool/KDD_run/KDD_r/18day_8hour/cluster_function.R', encoding = 'UTF-8')
#3-----------------------------对train数据进行聚类
##---------构造聚类的特征
#--9月、10月的归总
#-------9月份
start_month=9
start_day=19:27    #19:28或者19：19
start_hour=c(6,7,8,9)
distinct_route_volume_month1=distinct_route_volume_month(data,start_month,start_day,start_hour)
#--------10月份
start_month=10
start_day=10:17    #19:28或者19：19
start_hour=c(6,7,8,9)
distinct_route_volume_month2=distinct_route_volume_month(data,start_month,start_day,start_hour)
#--9月、10月的归总
distinct_route_volume=rbind(distinct_route_volume_month1,distinct_route_volume_month2)
#-------------
##--------------k均值聚类
x_name=c('b1_v','b2_v','range1_v','range2_v','top1_v','top_v','top_point_v')
d_k=distinct_route_volume[,x_name]   #-------所有属性数据
#-----选择最优类别数
result=rep(0,nrow(d_k)-1)
for (k in 1:length(result)) {
fit_km=kmeans(d_k,centers=k)
result[k]=fit_km$betweenss/fit_km$totss
}
round(result,2)
plot(1:length(result),result,type='b',main="Choosing the Optimal Number of Cluster",
xlab='namber of cluster:k',ylab='between/totss')
#  聚类 for volume
setwd("/Users/apple/code_tool/KDD_run/KDD_r/18day_8hour")
#--------每条路线分为2个时间段来建模
tollgate_id=1              #-------收费站（123）
direction=0                #-------方向（0进1出）
start_hour=c(6,7,8,9)     #小时----0-23，(6,7,8,9)(15,16,17,18)
#1----------------------按时间段产生训练数据
#读入train数据
data=read.table(paste0(" 18day_8hour   tollgate:",tollgate_id,'_',direction,'.txt'),
he=T)
data=data[order(data$start_day),]    #每天的数据排序归类
#2----------------读入需要的函数
source('/Users/apple/code_tool/KDD_run/KDD_r/18day_8hour/cluster_function.R', encoding = 'UTF-8')
#3-----------------------------对train数据进行聚类
##---------构造聚类的特征
#--9月、10月的归总
#-------9月份
start_month=9
start_day=19:27    #19:28或者19：19
start_hour=c(6,7,8,9)
distinct_route_volume_month1=distinct_route_volume_month(data,start_month,start_day,start_hour)
#--------10月份
start_month=10
start_day=10:17    #19:28或者19：19
start_hour=c(6,7,8,9)
distinct_route_volume_month2=distinct_route_volume_month(data,start_month,start_day,start_hour)
#--9月、10月的归总
distinct_route_volume=rbind(distinct_route_volume_month1,distinct_route_volume_month2)
#-------------
##--------------k均值聚类
x_name=c('b1_v','b2_v','range1_v','range2_v','top1_v','top_v','top_point_v')
d_k=distinct_route_volume[,x_name]   #-------所有属性数据
#-----选择最优类别数
result=rep(0,nrow(d_k)-1)
for (k in 1:length(result)) {
fit_km=kmeans(d_k,centers=k)
result[k]=fit_km$betweenss/fit_km$totss
}
round(result,2)
plot(1:length(result),result,type='b',main="Choosing the Optimal Number of Cluster",
xlab='namber of cluster:k',ylab='between/totss')
fit_km1=kmeans(d_k,centers =4)   #------k
print(fit_km1)
fit_km1$centers                  #每一类的平均值
number_cluster=fit_km1$cluster   #分类排序
data_v_cluster=cbind(distinct_route_volume,number_cluster)      #------------聚类后的分类结果
filename='test1_split_avg_volume1' #"training_split_avg_volume1"      #--------文件名
lda_data=read.csv(paste0('/Users/apple/code_tool/KDD_run/KDD_python/',filename,'.csv'))
names(lda_data)
#--分线路
lda_data_route1=lda_data_route(tollgate_id,direction)
#--------10月份
start_month=10
start_day=18:24    #10:17或者18:24
start_hour=c(6,7,8,9)
distinct_route_volume_month2=test_distinct_route_volume_month(lda_data_route1,start_month,start_day,start_hour)
#--9月、10月的归总
#test_route_volume=rbind(distinct_route_volume_month1,distinct_route_volume_month2)
test_route_volume=distinct_route_volume_month2
x_name=c('b1_v','range1_v','top1_v')
library('MASS')
data_train=data_v_cluster[,x_name]
fit_lda1=lda(number_cluster~.,data_train)
#进行预测
data_test=test_route_volume[,x_name]
pre_lda1=predict(fit_lda1,data_test)
pre_lda1$class      #排序结果
#
lm1
select_hour_volume1=select_hour_volume(data,start_month,start_day,start_hour)
route_volume=select_hour_volume1$volume
b_route_volume1=b_route_volume(route_volume)
b_route_volume1
#对于test数据，第一段用前6个数据
b_route_volume=function(route_volume){
if(start_hour[1]==6) {x=c(6,6+2/6,6+4/6,7,7+2/6,7+4/6,8,8+2/6,8+4/6,9,9+2/6,9+4/6)+1/6}
if(start_hour[1]==15) {x=c(15,15+2/6,15+4/6,16,16+2/6,16+4/6,17,17+2/6,17+4/6,18,18+2/6,18+4/6)+1/6}
{if(length(route_volume)==12)
#train数据
{x1=x[1:7]
x2=x[8:12]
lm1=lm(route_volume[1:7]~x1)
lm2=lm(route_volume[8:12]~x2)
l=list("b1"=lm1$coefficients[2],"b2"=lm2$coefficients[2])}
else
#test数据
{x1=x[1:6]
lm1=lm(route_volume[1:6]~x1)
l=list("b1"=lm1$coefficients[2])}
}
return(l)
}
b_route_volume1=b_route_volume(route_volume)
b_route_volume1
route_volume
select_hour_volume1=select_hour_volume(data,start_month,start_day,start_hour)
start_month=9
start_day=25    #19:28或者19：19
start_hour=c(6,7,8,9)
select_hour_volume1=select_hour_volume(data,start_month,start_day,start_hour)
route_volume=select_hour_volume1$volume
b_route_volume1=b_route_volume(route_volume)
b_route_volume1
if(start_hour[1]==6) {x=c(6,6+2/6,6+4/6,7,7+2/6,7+4/6,8,8+2/6,8+4/6,9,9+2/6,9+4/6)+1/6}
x1=x[1:6]
lm1=lm(route_volume[1:6]~x1)
lm1
x1
x[7]
route_volume[1:6]
lm.pred = predict(lm1,x[7],interval='prediction',level=0.95) #个体单值预测
lm.pred
?predict
lm.pred = predict(lm1,data.frame(x[7]),interval='prediction',level=0.95) #个体单值预测
lm.pred
lm.pred = predict(lm1,data.frame(x1=x[7]),interval='prediction',level=0.95) #个体单值预测
lm.pred
11.91*x[7]-62.9
lm.pred[1]
b_route_volume=function(route_volume){
if(start_hour[1]==6) {x=c(6,6+2/6,6+4/6,7,7+2/6,7+4/6,8,8+2/6,8+4/6,9,9+2/6,9+4/6)+1/6}
if(start_hour[1]==15) {x=c(15,15+2/6,15+4/6,16,16+2/6,16+4/6,17,17+2/6,17+4/6,18,18+2/6,18+4/6)+1/6}
{if(length(route_volume)==12)
#train数据
{x1=x[1:7]
x2=x[8:12]
lm1=lm(route_volume[1:7]~x1)
lm2=lm(route_volume[8:12]~x2)
l=list("b1"=lm1$coefficients[2],"b2"=lm2$coefficients[2])}
else
#test数据
{x1=x[1:6]
lm1=lm(route_volume[1:6]~x1)
lm.pred = predict(lm1,data.frame(x1=x[7]),interval='prediction',level=0.95) #个体单值预测
#lm.pred[1],向后一格的预测
l=list("b1"=lm1$coefficients[2],"v2_1st"=lm.pred[1])}
}
return(l)
}
b_route_volume1=b_route_volume(route_volume[1:6])
b_route_volume1
#  聚类 for volume
setwd("/Users/apple/code_tool/KDD_run/KDD_r/18day_8hour")
#--------每条路线分为2个时间段来建模
tollgate_id=1              #-------收费站（123）
direction=0                #-------方向（0进1出）
start_hour=c(6,7,8,9)     #小时----0-23，(6,7,8,9)(15,16,17,18)
#1----------------------按时间段产生训练数据
#读入train数据
data=read.table(paste0(" 18day_8hour   tollgate:",tollgate_id,'_',direction,'.txt'),
he=T)
data=data[order(data$start_day),]    #每天的数据排序归类
#2----------------读入需要的函数
source('/Users/apple/code_tool/KDD_run/KDD_r/18day_8hour/cluster_function.R', encoding = 'UTF-8')
#3-----------------------------对train数据进行聚类
##---------构造聚类的特征
#--9月、10月的归总
#-------9月份
start_month=9
start_day=19:27    #19:28或者19：19
start_hour=c(6,7,8,9)
distinct_route_volume_month1=distinct_route_volume_month(data,start_month,start_day,start_hour)
#--------10月份
start_month=10
start_day=10:17    #19:28或者19：19
start_hour=c(6,7,8,9)
distinct_route_volume_month2=distinct_route_volume_month(data,start_month,start_day,start_hour)
#--9月、10月的归总
distinct_route_volume=rbind(distinct_route_volume_month1,distinct_route_volume_month2)
#-------------
##--------------k均值聚类
x_name=c('b1_v','b2_v','range1_v','range2_v','top1_v','top_v','top_point_v')
d_k=distinct_route_volume[,x_name]   #-------所有属性数据
#-----选择最优类别数
result=rep(0,nrow(d_k)-1)
for (k in 1:length(result)) {
fit_km=kmeans(d_k,centers=k)
result[k]=fit_km$betweenss/fit_km$totss
}
round(result,2)
plot(1:length(result),result,type='b',main="Choosing the Optimal Number of Cluster",
xlab='namber of cluster:k',ylab='between/totss')
#result[k]
#------确定K后
fit_km1=kmeans(d_k,centers =4)   #------k
print(fit_km1)
fit_km1$centers                  #每一类的平均值
number_cluster=fit_km1$cluster   #分类排序
data_v_cluster=cbind(distinct_route_volume,number_cluster)      #------------聚类后的分类结果
#---------------------判别分析
#tollgate_id             #-------收费站-一开始就已知
#direction               #-------方向-一开始就已知
filename='test1_split_avg_volume1' #"training_split_avg_volume1"      #--------文件名
lda_data=read.csv(paste0('/Users/apple/code_tool/KDD_run/KDD_python/',filename,'.csv'))
names(lda_data)
#--分线路
lda_data_route1=lda_data_route(tollgate_id,direction)
#--------10月份
start_month=10
start_day=18:24    #10:17或者18:24
start_hour=c(6,7,8,9)
distinct_route_volume_month2=test_distinct_route_volume_month(lda_data_route1,start_month,start_day,start_hour)
#--9月、10月的归总
#test_route_volume=rbind(distinct_route_volume_month1,distinct_route_volume_month2)
test_route_volume=distinct_route_volume_month2
View(test_route_volume)
#  聚类 for volume
setwd("/Users/apple/code_tool/KDD_run/KDD_r/18day_8hour")
#--------每条路线分为2个时间段来建模
tollgate_id=1              #-------收费站（123）
direction=0                #-------方向（0进1出）
start_hour=c(6,7,8,9)     #小时----0-23，(6,7,8,9)(15,16,17,18)
#1----------------------按时间段产生训练数据
#读入train数据
data=read.table(paste0(" 18day_8hour   tollgate:",tollgate_id,'_',direction,'.txt'),
he=T)
data=data[order(data$start_day),]    #每天的数据排序归类
#2----------------读入需要的函数
source('/Users/apple/code_tool/KDD_run/KDD_r/18day_8hour/cluster_function.R', encoding = 'UTF-8')
#3-----------------------------对train数据进行聚类
##---------构造聚类的特征
#--9月、10月的归总
#-------9月份
start_month=9
start_day=19:27    #19:28或者19：19
start_hour=c(6,7,8,9)
distinct_route_volume_month1=distinct_route_volume_month(data,start_month,start_day,start_hour)
#--------10月份
start_month=10
start_day=10:17    #19:28或者19：19
start_hour=c(6,7,8,9)
distinct_route_volume_month2=distinct_route_volume_month(data,start_month,start_day,start_hour)
#--9月、10月的归总
distinct_route_volume=rbind(distinct_route_volume_month1,distinct_route_volume_month2)
#-------------
##--------------k均值聚类
x_name=c('b1_v','b2_v','range1_v','range2_v','top1_v','top_v','top_point_v')
d_k=distinct_route_volume[,x_name]   #-------所有属性数据
#-----选择最优类别数
result=rep(0,nrow(d_k)-1)
for (k in 1:length(result)) {
fit_km=kmeans(d_k,centers=k)
result[k]=fit_km$betweenss/fit_km$totss
}
round(result,2)
plot(1:length(result),result,type='b',main="Choosing the Optimal Number of Cluster",
xlab='namber of cluster:k',ylab='between/totss')
#result[k]
#------确定K后
fit_km1=kmeans(d_k,centers =4)   #------k
print(fit_km1)
fit_km1$centers                  #每一类的平均值
number_cluster=fit_km1$cluster   #分类排序
data_v_cluster=cbind(distinct_route_volume,number_cluster)      #------------聚类后的分类结果
#---------------------判别分析
#tollgate_id             #-------收费站-一开始就已知
#direction               #-------方向-一开始就已知
filename='test1_split_avg_volume1' #"training_split_avg_volume1"      #--------文件名
lda_data=read.csv(paste0('/Users/apple/code_tool/KDD_run/KDD_python/',filename,'.csv'))
names(lda_data)
#--分线路
lda_data_route1=lda_data_route(tollgate_id,direction)
#--------10月份
start_month=10
start_day=18:24    #10:17或者18:24
start_hour=c(6,7,8,9)
distinct_route_volume_month2=test_distinct_route_volume_month(lda_data_route1,start_month,start_day,start_hour)
#--9月、10月的归总
#test_route_volume=rbind(distinct_route_volume_month1,distinct_route_volume_month2)
test_route_volume=distinct_route_volume_month2
View(test_route_volume)
x_name=c('b1_v','range1_v','top1_v')
library('MASS')
data_train=data_v_cluster[,x_name]
fit_lda1=lda(number_cluster~.,data_train)
#进行预测
data_test=test_route_volume[,x_name]
pre_lda1=predict(fit_lda1,data_test)
pre_lda1$class      #排序结果
x_name=c('b1_v','range1_v','top1_v')
library('MASS')
data_train=data_v_cluster[,x_name]
fit_lda1=lda(number_cluster~.,data_train)
#进行预测
data_test=test_route_volume[,x_name]
pre_lda1=predict(fit_lda1,data_test)
pre_lda1$class      #排序结果
fit_km1$centers                  #每一类的平均值
View(test_route_volume)
test_route_volume
pre_v2=NULL
i=1
#回归方程
if(start_hour[1]==6) {x=c(6,6+2/6,6+4/6,7,7+2/6,7+4/6,8,8+2/6,8+4/6,9,9+2/6,9+4/6)+1/6}
if(start_hour[1]==15) {x=c(15,15+2/6,15+4/6,16,16+2/6,16+4/6,17,17+2/6,17+4/6,18,18+2/6,18+4/6)+1/6}
x0=x[7]
y0=test_route_volume$v2_1st[i]
x=x[8:12]
y=b2_v*(x-x0)+y0
fit_km1$centers
fit_km1$centers[pre_lda1$class[i]]
fit_km1$centers[pre_lda1$class[i],]
cluster_attribute=fit_km1$centers[pre_lda1$class[i],]
(cluster_attribute$b2_v)
cluster_attribute$'b2_v'
cluster_attribute
View(test_route_volume)
test_route_volume
cluster_attribute['b2_v']
pre_v2=NULL
i=1
cluster_attribute=fit_km1$centers[pre_lda1$class[i],]
#回归方程
if(start_hour[1]==6) {x=c(6,6+2/6,6+4/6,7,7+2/6,7+4/6,8,8+2/6,8+4/6,9,9+2/6,9+4/6)+1/6}
if(start_hour[1]==15) {x=c(15,15+2/6,15+4/6,16,16+2/6,16+4/6,17,17+2/6,17+4/6,18,18+2/6,18+4/6)+1/6}
x0=x[7]
y0=test_route_volume$v2_1st[i]
x=x[8:12]
y=(cluster_attribute['b2_v'])*(x-x0)+y0
y
cluster_attribute['top_v']
pre_lda1
pre_v2=rbind(pre_v2,c(y0,y))
pre_v2
pre_v2=rbind(pre_v2,c(y0,y))
pre_v2
names(pre_v2)<-c(x[7:12])
pre_v2
c(x[7:12])
names(pre_v2)<-x[7:12]
pre_v2
-x[7:12]
x[7:12]
x
if(start_hour[1]==6) {x=c(6,6+2/6,6+4/6,7,7+2/6,7+4/6,8,8+2/6,8+4/6,9,9+2/6,9+4/6)+1/6}
names(pre_v2)<-x[7:12]
pre_v2
x[7:12]
as.character(x[7:12])
as.character(round(x[7:12],2))
names(pre_v2)<-as.character(round(x[7:12],2))
pre_v2
pre_v2=data.frame()
pre_v2=rbind(pre_v2,c(y0,y))
names(pre_v2)<-as.character(round(x[7:12],2))
pre_v2
pre_cluster=function(fit_km1,pre_lda1){
pre_v2=data.frame()
if(start_hour[1]==6) {x=c(6,6+2/6,6+4/6,7,7+2/6,7+4/6,8,8+2/6,8+4/6,9,9+2/6,9+4/6)+1/6}
if(start_hour[1]==15) {x=c(15,15+2/6,15+4/6,16,16+2/6,16+4/6,17,17+2/6,17+4/6,18,18+2/6,18+4/6)+1/6}
for (i in 1:7) {
cluster_attribute=fit_km1$centers[pre_lda1$class[i],]#对应分类的特征
x0=x[7]
y0=test_route_volume$v2_1st[i]
x2=x[8:12]
y=(cluster_attribute['b2_v'])*(x2-x0)+y0
y
if(y[1]<cluster_attribute['top_v']) y[1]=cluster_attribute['top_v']
pre_v2=rbind(pre_v2,c(y0,y))
}
names(pre_v2)<-as.character(round(x[7:12],2))
return(pre_v2)
}
pre_cluster1=pre_cluster(fit_km1,pre_lda1)
pre_cluster1
pre_v2=data.frame()
i=1
cluster_attribute=fit_km1$centers[pre_lda1$class[i],]
#回归方程
if(start_hour[1]==6) {x=c(6,6+2/6,6+4/6,7,7+2/6,7+4/6,8,8+2/6,8+4/6,9,9+2/6,9+4/6)+1/6}
if(start_hour[1]==15) {x=c(15,15+2/6,15+4/6,16,16+2/6,16+4/6,17,17+2/6,17+4/6,18,18+2/6,18+4/6)+1/6}
x0=x[7]
y0=test_route_volume$v2_1st[i]
x2=x[8:12]
y=(cluster_attribute['b2_v'])*(x2-x0)+y0
y
i=2
cluster_attribute=fit_km1$centers[pre_lda1$class[i],]
#回归方程
if(start_hour[1]==6) {x=c(6,6+2/6,6+4/6,7,7+2/6,7+4/6,8,8+2/6,8+4/6,9,9+2/6,9+4/6)+1/6}
if(start_hour[1]==15) {x=c(15,15+2/6,15+4/6,16,16+2/6,16+4/6,17,17+2/6,17+4/6,18,18+2/6,18+4/6)+1/6}
x0=x[7]
y0=test_route_volume$v2_1st[i]
x2=x[8:12]
y=(cluster_attribute['b2_v'])*(x2-x0)+y0
y
View(data_v_cluster)
pre_lda1$class
fit_km1$centers
View(data_v_cluster)
cluster_attribute
fix(9.6)
floor(9.6)
y
floor(cluster_attribute['top_point_v'])
y[floor(cluster_attribute['top_point_v'])-7]
pre_cluster1
pre_cluster=function(fit_km1,pre_lda1){
pre_v2=data.frame()
if(start_hour[1]==6) {x=c(6,6+2/6,6+4/6,7,7+2/6,7+4/6,8,8+2/6,8+4/6,9,9+2/6,9+4/6)+1/6}
if(start_hour[1]==15) {x=c(15,15+2/6,15+4/6,16,16+2/6,16+4/6,17,17+2/6,17+4/6,18,18+2/6,18+4/6)+1/6}
for (i in 1:7) {
cluster_attribute=fit_km1$centers[pre_lda1$class[i],]#对应分类的特征
x0=x[7]
y0=test_route_volume$v2_1st[i]
x2=x[8:12]
y=(cluster_attribute['b2_v'])*(x2-x0)+y0
y
{if(y[floor(cluster_attribute['top_point_v'])-7]<cluster_attribute['top_v'])
y[floor(cluster_attribute['top_point_v'])-7]=cluster_attribute['top_v']}
pre_v2=rbind(pre_v2,c(y0,y))
}
names(pre_v2)<-as.character(round(x[7:12],2))
return(pre_v2)
}
pre_cluster1=pre_cluster(fit_km1,pre_lda1)
pre_cluster1
test_route_volume
sub_data=read.csv('p_volume_sample.csv',he=T)
View(sub_data)
source('~/code_tool/KDD_run/KDD_r/18day_8hour/分类_聚类_run2.r', echo=TRUE)
pre_cluster1
sub_pre2_19=pre_cluster1
sub_pre1_10
sub_pre2_19=pre_cluster1
sub_pre2_19
source('~/code_tool/KDD_run/KDD_r/18day_8hour/分类_聚类_run2.r', echo=TRUE)
sub_pre1_10=pre_cluster1
sub_pre1_10
sub_pre2_19
start_hour=c(15,16,17,18)     #小时----0-23，(6,7,8,9)(15,16,17,18)
source('~/code_tool/KDD_run/KDD_r/18day_8hour/分类_聚类_run2.r', echo=TRUE)
pre_cluster1
sub_pre2_19=pre_cluster1
sub_pre1_10
start_day=10:17    #19:28或者19：19
source('~/code_tool/KDD_run/KDD_r/18day_8hour/分类_聚类_run2.r', echo=TRUE)
sub_pre2_19=pre_cluster1
pre_cluster1
sub_pre1_10
source('~/code_tool/KDD_run/KDD_r/18day_8hour/分类_聚类_run2.r', echo=TRUE)
y[(floor(cluster_attribute["top_point_v"]) - 7)]
cluster_attribute["top_v"]
(y[(floor(cluster_attribute["top_point_v"]) - 7)] < cluster_attribute["top_v"])
source('~/code_tool/KDD_run/KDD_r/18day_8hour/分类_聚类_run2.r', echo=TRUE)
(y[(floor(cluster_attribute["top_point_v"]) - 7)] < as.numeric(cluster_attribute["top_v"]))
y[(floor(cluster_attribute["top_point_v"]) - 7)]
as.numeric(cluster_attribute["top_v"])
result=rep(0,nrow(d_k)-1)
for (k in 1:length(result)) {
fit_km=kmeans(d_k,centers=k)
result[k]=fit_km$betweenss/fit_km$totss
}
round(result,2)
plot(1:length(result),result,type='b',main="Choosing the Optimal Number of Cluster",
xlab='namber of cluster:k',ylab='between/totss')
source('~/code_tool/KDD_run/KDD_r/18day_8hour/分类_聚类_run2.r', echo=TRUE)
pre_cluster1
sub_pre2_19
data_test
distinct_route_volume
print(fit_km1)
source('~/code_tool/KDD_run/KDD_r/18day_8hour/分类_聚类_run2.r', echo=TRUE)
