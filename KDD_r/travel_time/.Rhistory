har[1,1];har[1,2]
har[1,1];har[2,1]
har[,1]
round(har[,1],2)
cos(2*3.14*12*c(1:60))
cos(2*3.14/12*c(1:60))
??pi
round(har[,1],2)
model4=lm(tempdub~har)
summary(model4)
plot(tempdub,type='o',color=red)
#预测拟合曲线与实际点
plot(ts(fitted(model4)),freq=12,start=c(1964,1),type='l')
ylim=range(c(fitted(model4),tempdub))
points(tempdub)
plot(ts(fitted(model4),freq=12,start=c(1964,1)),type='l')
ylim=range(c(fitted(model4),tempdub))
points(tempdub)
plot(ts(fitted(model4),freq=12,start=c(1964,1)),
type='l',
ylim=range(c(fitted(model4),tempdub)))
points(tempdub)
plot(ts(fitted(model4),freq=12,start=c(1964,1)),
type='l',
ylim=range(c(fitted(model4),tempdub)),
ylab="y")
points(tempdub)
setwd("/Users/apple/code_tool/KDD_run/KDD_r/18day_8hour")
#--------每条路线分为2个时间段来建模
tollgate_id=3              #-------收费站（123）
direction=1                #-------方向（0进1出）
start_hour=c(15,16,17,18)    #小时----0-23，(6,7,8,9)(15,16,17,18)
filename='training_split_avg_volume1' #"training_split_avg_volume1"      #--------文件名
lda_data=read.csv(paste0('/Users/apple/code_tool/KDD_run/KDD_python/',filename,'.csv'))
names(lda_data)
#2.2分线路
data=lda_data_route(lda_data,tollgate_id,direction)
#-------------------------
data=data[order(data$start_day),]    #每天的数据排序归类
source('/Users/apple/code_tool/KDD_run/KDD_r/18day_8hour/cluster_function.R', encoding = 'UTF-8')
#2.1
filename='training_split_avg_volume1' #"training_split_avg_volume1"      #--------文件名
lda_data=read.csv(paste0('/Users/apple/code_tool/KDD_run/KDD_python/',filename,'.csv'))
names(lda_data)
#2.2分线路
data=lda_data_route(lda_data,tollgate_id,direction)
#-------------------------
data=data[order(data$start_day),]    #
start_month=9
start_day=19:27    #19:28或者19：19
distinct_route_volume_month1=distinct_route_volume_month(data,start_month,start_day,start_hour)
#--------10月份
start_month=10
start_day=10:17    #19:28或者19：19
distinct_route_volume_month2=distinct_route_volume_month(data,start_month,start_day,start_hour)
#--9月、10月的归总
distinct_route_volume=rbind(distinct_route_volume_month1,distinct_route_volume_month2)
#-------------
View(distinct_route_volume)
setwd("/Users/apple/code_tool/KDD_run/KDD_r/travel_time")
data=read.csv('/Users/apple/code_tool/KDD_run/KDD_python/trajectories(table 5)_training.csv')
data1=data
View(data)
summary(data)
n=nrow(data)
data$travel_seq[1:5]
data$starting_time[1:5]
month=NULL
day=NULL
hour=NULL
minute=NULL
for (i in 1:n) {
bbb<- unlist(strsplit(as.character(data$starting_time[i]),split=" "))
month[i]=unlist(strsplit(as.character(bbb[1]),split="-"))[2]
day[i]=unlist(strsplit(as.character(bbb[1]),split="-"))[3]
hour[i]=unlist(strsplit(as.character(bbb[2]),split=":"))[1]
minute[i]=unlist(strsplit(as.character(bbb[2]),split=":"))[2]
}
#---------------------------------将分割时间添加到最后列
d1=cbind(month,day)
d2=cbind(d1,hour)
d3=cbind(d2,minute)
data=cbind(data,d3)
names(data) <- c("intersection_id","tollgate_id","vehicle_id","starting_time",
"travel_seq","travel_time",
"start_month","start_day","start_hour","start_minute")
#---------------------
View(data)
intersection_id='A'
tollgate_id=3              #-------收费站（123）
links=c(110,123,107,108,119,114,118,122)
length_link=c(109,59,34,40,9,198,206,197)
357.7/(1-0.518639)
0.08204/0.8693
0.08204/0.08693
select_day_time=function(data,start_month,start_day,tollgate_id,intersection_id){
select_data=data.frame()
select1=data[which(data$"start_month"==start_month & data$"start_day"==start_day),]
#确定的时间范围内的数据
select2=select1[which(select1$"tollgate_id"==tollgate_id),]
#-确定收费站的数据
select3=select2[which(select2$intersection_id==intersection_id),]
#-确定交叉路口
select_data=rbind(select_data,select3)
}
#-----将输入数字不满2位的进行补零函数
paste0_h=function(h){
for (i in 1:length(h)) {
if(h[i]<10) h[i] <- paste0("0",h[i])
}
return(h)
}
#-------
#paste0_h(1:20)
start_month='08'
start_day=c(17,18)
select_day_time1=select_day_time(data,start_month,start_day,tollgate_id,direction)
intersection_id='A'
tollgate_id=3              #-------收费站（123）
links=c(110,123,107,108,119,114,118,122)
length_link=c(109,59,34,40,9,198,206,197)
select_day_time=function(data,start_month,start_day,tollgate_id,intersection_id){
select_data=data.frame()
select1=data[which(data$"start_month"==start_month & data$"start_day"==start_day),]
#确定的时间范围内的数据
select2=select1[which(select1$"tollgate_id"==tollgate_id),]
#-确定收费站的数据
select3=select2[which(select2$intersection_id==intersection_id),]
#-确定交叉路口
select_data=rbind(select_data,select3)
}
#-----将输入数字不满2位的进行补零函数
paste0_h=function(h){
for (i in 1:length(h)) {
if(h[i]<10) h[i] <- paste0("0",h[i])
}
return(h)
}
#-------
#paste0_h(1:20)
start_month='08'
start_day=c(17,18)
select_day_time1=select_day_time(data,start_month,start_day,tollgate_id,direction)
select_day_time1=select_day_time(data,start_month,start_day,tollgate_id,intersection_id)
View(select_day_time1)
d_links=NULL
for (i in 1:nrow(select_day_volume1)) {
link_v1=f_link_v(length_link,links,select_day_volume1$travel_seq[i])
d_links=rbind(d_links,link_v1)
}
d_links=as.data.frame(d_links)
names(d_links)<-as.character(links)
d_links_a=cbind(select_day_time1,d_links)
d_links=NULL
for (i in 1:nrow(select_day_volume1)) {
link_v1=f_link_v(length_link,links,select_day_time1$travel_seq[i])
d_links=rbind(d_links,link_v1)
}
d_links=as.data.frame(d_links)
names(d_links)<-as.character(links)
d_links=NULL
for (i in 1:nrow(select_day_time1)) {
link_v1=f_link_v(length_link,links,select_day_time1$travel_seq[i])
d_links=rbind(d_links,link_v1)
}
d_links=as.data.frame(d_links)
names(d_links)<-as.character(links)
#每次针对一个travel_seq
f_link_v=function(length_link,links,travel_seq){
#-------link分割时间
link_time=NULL
link_a<- unlist(strsplit(as.character(travel_seq),split=";"))
link_a
for (j in 1:length(links)) {
link_time[j]=unlist(strsplit(as.character(link_a[j]),split="#"))[3]
}
link_time=as.numeric(link_time)
#------link速度
link_v=NULL
link_v=length_link/link_time
return(link_v)
}
d_links=NULL
for (i in 1:nrow(select_day_time1)) {
link_v1=f_link_v(length_link,links,select_day_time1$travel_seq[i])
d_links=rbind(d_links,link_v1)
}
d_links=as.data.frame(d_links)
names(d_links)<-as.character(links)
d_links_a=cbind(select_day_time1,d_links)
View(d_links_a)
View(d_links_a)
View(d_links_a)
names(data)
d_links_a=d_links_a[order(d_links_a$start_day,d_links_a$start_hour,d_links_a$start_minute),]
View(d_links_a)
select1_start_hour=d_links_a[which(d_links_a$"start_day"==17),]$start_hour
select1_start_hour
table(select1_start_hour)
plot(select1_start_hour)
#---------------查看每天不同时刻的车辆数
select1_start_hour=d_links_a[which(d_links_a$"start_day"==18),]$start_hour #--
table(select1_start_hour)
plot(select1_start_hour)
start_month='10'    #08
start_day=c(1,2)  #17,18
select_day_time1=select_day_time(data,start_month,start_day,tollgate_id,intersection_id)
d_links=NULL
for (i in 1:nrow(select_day_time1)) {
link_v1=f_link_v(length_link,links,select_day_time1$travel_seq[i])
d_links=rbind(d_links,link_v1)
}
d_links=as.data.frame(d_links)
names(d_links)<-as.character(links)
d_links_a=cbind(select_day_time1,d_links)
#数据排序归类
d_links_a=d_links_a[order(d_links_a$start_day,d_links_a$start_hour,d_links_a$start_minute),]
View(d_links)
start_month='10'    #08
start_day=c(01,02)  #17,18
select_day_time1=select_day_time(data,start_month,start_day,tollgate_id,intersection_id)
View(data1)
View(data)
View(data)
start_month='10'    #08
start_day=c('01','02')  #17,18
select_day_time1=select_day_time(data,start_month,start_day,tollgate_id,intersection_id)
d_links=NULL
for (i in 1:nrow(select_day_time1)) {
link_v1=f_link_v(length_link,links,select_day_time1$travel_seq[i])
d_links=rbind(d_links,link_v1)
}
d_links=as.data.frame(d_links)
names(d_links)<-as.character(links)
d_links_a=cbind(select_day_time1,d_links)
select1_start_hour=d_links_a[which(d_links_a$"start_day"=='01'),]$start_hour #--
table(select1_start_hour)
plot(select1_start_hour)
#---------------查看每天不同时刻的车辆数
select1_start_hour=d_links_a[which(d_links_a$"start_day"=='02'),]$start_hour #--
table(select1_start_hour)
plot(select1_start_hour)
plot(select1_start_hour,paste0('流量',start_month,'-',day))
plot(select1_start_hour,main=paste0('流量',start_month,'-',day))
plot(select1_start_hour)
title(paste0('流量',start_month,'-',day))
day='01' #--
paste0('流量',start_month,'-',day)
select1_start_hour
plot(select1_start_hour)
title(paste0('流量',start_month,'-',day))
par(family='STKaiti')
title(paste0('流量',start_month,'-',day))
plot(select1_start_hour)
par(family='STKaiti')
title(paste0('流量',start_month,'-',day))
day='02' #--
select1_start_hour=d_links_a[which(d_links_a$"start_day"==day),]$start_hour #--
table(select1_start_hour)
plot(select1_start_hour)
par(family='STKaiti')
title(paste0('流量',start_month,'-',day))
View(d_links_a)
sum(complete.cases(d_links_a))
sum(!complete.cases(d_links_a))
!complete.cases(d_links_a)
d_links_a[!complete.cases(d_links_a)]
d_links_a[!complete.cases(d_links_a),]
dl=d_links_a[!complete.cases(d_links_a),]
View(dl)
write.table(dl,'缺失数据.txt')
data1[which(data1$vehicle_id==dl$vehicle_id),]
data1[which(data1$vehicle_id==dl$vehicle_id[1]),]
travel_seq=data1[which(data1$vehicle_id==dl$vehicle_id[1]),]$travel_seq
link_a<- unlist(strsplit(as.character(travel_seq),split=";"))
link_a
link_time=NULL
for (j in 1:length(link_a)) {
link_time[j]=unlist(strsplit(as.character(link_a[j]),split="#"))[3]
}
link_time
link_time=as.numeric(link_time)
sum(link_time)
data1[which(data1$vehicle_id==dl$vehicle_id[1]),]$travel_time
#-------
travel_seq=data1[which(data1$vehicle_id==dl$vehicle_id[2]),]$travel_seq  #123-
link_time=NULL
link_a<- unlist(strsplit(as.character(travel_seq),split=";"))
link_a
for (j in 1:length(link_a)) {
link_time[j]=unlist(strsplit(as.character(link_a[j]),split="#"))[3]
}
link_time=as.numeric(link_time)
sum(link_time)
#-
data1[which(data1$vehicle_id==dl$vehicle_id[2]),]$travel_time   #123-
d_links_full=d_links_a[complete.cases(d_links_a),]
View(d_links_full)
View(d_links_full)
unlist(strsplit(as.character(d_links_full$travel_seq[3]),split=";"))
link_a=unlist(strsplit(as.character(d_links_full$travel_seq[3]),split=";"))
link_time=NULL
for (j in 1:length(link_a)) {
link_time[j]=unlist(strsplit(as.character(link_a[j]),split="#"))[3]
}
link_time=as.numeric(link_time)
sum(link_time)
link_a=unlist(strsplit(as.character(d_links_full$travel_seq[1]),split=";")) #--
link_time=NULL
for (j in 1:length(link_a)) {
link_time[j]=unlist(strsplit(as.character(link_a[j]),split="#"))[3]
}
link_time=as.numeric(link_time)
sum(link_time)
names(d_links_full)
links
x_name=c("travel_time",links)
x_name
fit_km1=kmeans(d_links_full[,x_name],centers =1)   #k
print(fit_km1)
fit_km1$centers                  #每一类的平均值
fit_km1=kmeans(d_links_full[,x_name],centers =5)   #k
fit_km1$centers                  #每一类的平均值
number_cluster=fit_km1$cluster   #分类排序
number_cluster
table(number_cluster)
fit_km1$centers                  #每一类的平均值
mean(d_links_full[,"travel_time"])
summary(d_links_full[,"travel_time"])
sp=boxplot(travel_time)
travel_time=d_links_full[,"travel_time"]
#异常点检验
sp=boxplot(travel_time)
sp
sp$out
d_links_full[which(d_links_full$travel_time==sp$out[i]),]
d_links_full[which(d_links_full$travel_time==sp$out[1]),]
d_outlines=data.frame()
for (i in 1:length(sp$out)) {
d_outlines[i,]=d_links_full[which(d_links_full$travel_time==sp$out[i]),]
}
View(d_outlines)
d_outlines
i=1
d_outlines[i,]=d_links_full[which(d_links_full$travel_time==sp$out[i]),]
d_outlines
d_outlines=data.frame()
for (i in 1:length(sp$out)) {
d_outlines=rbind(d_outlines,d_links_full[which(d_links_full$travel_time==sp$out[i]),])
}
View(d_outlines)
length(sp$out)
d_links_normal=d_links_full[which(d_links_full$travel_time != sp$out),]    #完整数据
dotchart(travel_time)
which(d_links_full$travel_time==sp$out[i])
sub=sp$out
sub
for (i in 1:length(sp$out)) {
sub[i] = which(d_links_full$travel_time==sp$out[i])
}
for (i in 1:length(sp$out)) {
sub[i] = which(d_links_full$travel_time==sp$out[i])
}
sub
d_links_normal=d_links_full[-sub,]    #剔除异常数据
x_name=c("travel_time",links)
fit_km1=kmeans(d_links_normal[,x_name],centers =5)   #k
fit_km1$centers                  #每一类的平均值
number_cluster=fit_km1$cluster   #分类排序
table(number_cluster)
fit_km1$betweenss/fit_km1$totss
select_k=function(d_k){
result=rep(0,nrow(d_k)-1)
for (k in 1:length(result)) {
fit_km=kmeans(d_k,centers=k)
result[k]=fit_km$betweenss/fit_km$totss
}
k=4
for (i in 1:4) {
if(round(result,2)[i]>=0.85){ k=i;break;}
}
return(k)
}
k=select_k(d_links_normal[,x_name])
k
d_k=d_links_normal[,x_name]
result=rep(0,nrow(d_k)-1)
for (k in 1:length(result)) {
fit_km=kmeans(d_k,centers=k)
result[k]=fit_km$betweenss/fit_km$totss
}
plot(result)
result=rep(0,10)
for (k in 1:length(result)) {
fit_km=kmeans(d_k,centers=k)
result[k]=fit_km$betweenss/fit_km$totss
}
result=rep(0,10)
for (k in 1:10) {
fit_km=kmeans(d_k,centers=k)
result[k]=fit_km$betweenss/fit_km$totss
}
plot(result)
plot(result,type = 'o')
plot(result,type = 'o',xlab = 'k')
fit_km1=kmeans(d_links_normal[,x_name],centers =4)   #k
fit_km1$centers                  #每一类的平均值
number_cluster=fit_km1$cluster   #分类排序
table(number_cluster)
d_links_cluster=cbind(d_links_normal,number_cluster)      #------------聚类后的分类结果
View(d_links_cluster)
plot(d_links_normal[,x_name],pch=(fit_km1$centers -1))
library(mclust)
fit_EM=Mclust(d_links_normal[,x_name])
summary(fit_EM)
table(number_cluster)
plot(fit_EM)
fit_km1$centers                  #每一类的平均值
View(d_links_cluster)
center_fit10=fit_km1
center_fit10$centers
start_month='08'    #08
start_day=c(17,18)  #17,18  '01','02'
select_day_time1=select_day_time(data,start_month,start_day,tollgate_id,intersection_id)
#---------------------------计算每行的link速度并将添加到最后列select_day_time1
d_links=NULL
for (i in 1:nrow(select_day_time1)) {
link_v1=f_link_v(length_link,links,select_day_time1$travel_seq[i])
d_links=rbind(d_links,link_v1)
}
d_links=as.data.frame(d_links)
names(d_links)<-as.character(links)
d_links_a=cbind(select_day_time1,d_links)
#数据排序归类
d_links_a=d_links_a[order(d_links_a$start_day,d_links_a$start_hour,d_links_a$start_minute),]
#-----------------检查数据是否存在缺失
sum(complete.cases(d_links_a))
sum(!complete.cases(d_links_a))
d_links_full=d_links_a[complete.cases(d_links_a),]    #完整数据
travel_time=d_links_full[,"travel_time"]
#异常值识别
dotchart(travel_time)  #单变量散点图
sp=boxplot(travel_time)
sp$out
#异常数据处理（sub-异常值所在的行）
for (i in 1:length(sp$out)) {
sub[i] = which(d_links_full$travel_time==sp$out[i])
}
d_links_normal=d_links_full[-sub,]    #剔除异常数据
d_outlines=d_links_full[sub,]
result=rep(0,10)
for (k in 1:10) {
fit_km=kmeans(d_links_normal[,x_name],centers=k)
result[k]=fit_km$betweenss/fit_km$totss
}
plot(result,type = 'o',xlab = 'k')
fit_km1=kmeans(d_links_normal[,x_name],centers =4)   #k
#print(fit_km1)
fit_km1$betweenss/fit_km1$totss
fit_km1$centers                  #每一类的平均值
number_cluster=fit_km1$cluster   #分类排序
table(number_cluster)
d_links_cluster=cbind(d_links_normal,number_cluster)
center_fit8=fit_km1
center_fit8$centers
center_fit10$centers
table(number_cluster)
list('10_center'=center_fit10$centers,'8_center'=center_fit8$centers )
list('10_cluster'=center_fit10$clusters,'8_cluster'=center_fit8$cluster )
list('10_cluster'=table(center_fit10$clusters),'8_cluster'=table(center_fit8$cluster) )
table(center_fit10$clusters)
center_fit10
list('10_cluster'=table(center_fit10$cluster),'8_cluster'=table(center_fit8$cluster) )
list('10_center'=center_fit10$centers,'8_center'=center_fit8$centers )
data_test=read.csv('/Users/apple/code_tool/KDD_run/KDD_python/trajectories(table 5)_test1.csv')
data_test1=data_test
col_append=function(data){
n=nrow(data)
#------------------------------时间分割
month=NULL
day=NULL
hour=NULL
minute=NULL
for (i in 1:n) {
bbb<- unlist(strsplit(as.character(data$starting_time[i]),split=" "))
month[i]=unlist(strsplit(as.character(bbb[1]),split="-"))[2]
day[i]=unlist(strsplit(as.character(bbb[1]),split="-"))[3]
hour[i]=unlist(strsplit(as.character(bbb[2]),split=":"))[1]
minute[i]=unlist(strsplit(as.character(bbb[2]),split=":"))[2]
}
#---------------------------------将分割时间添加到最后列
d1=cbind(month,day)
d2=cbind(d1,hour)
d3=cbind(d2,minute)
data=cbind(data,d3)
names(data) <- c("intersection_id","tollgate_id","vehicle_id","starting_time",
"travel_seq","travel_time",
"start_month","start_day","start_hour","start_minute")
#---------------------
return(data)
}
#--
data_test <- col_append(col_append)
data_test <- col_append(data_test)
View(data_test)
select_day_time_test1=select_day_time(data_test,start_month,start_day,tollgate_id,intersection_id)
18:24
start_month='10'    #08
start_day=18:24    #c(17,18)  #17,18  '01','02'
select_day_time_test1=select_day_time(data_test,start_month,start_day,tollgate_id,intersection_id)
View(select_day_time_test1)
plot(1:10,main="斤斤计较 ")
